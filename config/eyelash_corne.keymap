#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        mtl: mtl {
            compatible = "zmk,behavior-hold-tap";
            label = "MTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <50>;
            hold-while-undecided;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 35 36 37 38 39 40 41 45 46 47 19 44 43 42 34>;
            hold-trigger-on-release;
        };

        mtr: mtr {
            compatible = "zmk,behavior-hold-tap";
            label = "MTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <50>;
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 13 14 15 16 17 18 19 20 21 28 29 30 31 32 33 34 35 42 43 44 45 46 47>;
        };

        td_sc: tap_dance_shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap Dance: Shift -> CapsWord";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <150>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&trans  &kp Q        &kp W        &kp E         &kp R         &kp T                                              &trans                        &kp Y                    &kp U         &kp I         &kp O            &kp P           &kp LBKT
&td_sc  &mtl LGUI A  &mtl LALT S  &mtl LCTRL D  &mtl LSHFT F  &mtl LS(LA(LC(LGUI))) G                &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &mtr LS(LA(LC(LGUI))) H  &mtr RSHFT J  &mtr RCTRL K  &mtr LEFT_ALT L  &mtr LGUI SEMI  &kp SQT
&trans  &kp Z        &kp X        &kp C         &kp V         &kp B                    &kp C_MUTE                &trans                        &kp N                    &kp M         &kp COMMA     &kp DOT          &kp FSLH        &kp BSLH
                                  &kp ESC       &kp SPACE     &kp TAB                                                                          &kp RET                  &kp BSPC      &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
