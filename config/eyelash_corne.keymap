#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        mtl: mtl {
            compatible = "zmk,behavior-hold-tap";
            label = "MTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 35 36 37 38 39 40 41 45 46 47 19 44 43 42 34>;
            hold-trigger-on-release;
            flavor = "balanced";
        };

        mtr: mtr {
            compatible = "zmk,behavior-hold-tap";
            label = "MTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 13 14 15 16 17 18 19 20 21 28 29 30 31 32 33 34 35 42 43 44 45 46 47>;
            flavor = "balanced";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&none       &kp Q        &kp W        &kp E         &kp R         &kp T                                              &kp LG(G)                     &kp Y                    &kp U            &kp I         &kp O            &kp P           &kp LBKT
&caps_word  &mtl LGUI A  &mtl LALT S  &mtl LCTRL D  &mtl LSHFT F  &mtl LS(LA(LC(LGUI))) G                &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &mtr LS(LA(LC(LGUI))) H  &mtr RSHFT J     &mtr RCTRL K  &mtr LEFT_ALT L  &mtr LGUI SEMI  &kp SQT
&none       &kp Z        &kp X        &kp C         &kp V         &kp B                    &kp C_MUTE                &to 1                         &kp N                    &kp M            &kp COMMA     &kp DOT          &kp FSLH        &kp BSLH
                                      &lt 2 ESC     &lt 3 SPACE   &lt 4 TAB                                                                        &lt 5 ENTER              &lt 6 BACKSPACE  &lt 7 DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        gaming {
            bindings = <
&kp GRAVE  &kp I      &kp Q  &kp W    &kp E      &kp R                                 &kp LG(G)              &kp Y     &kp U            &kp I      &kp O     &kp P     &kp BSPC
&kp TAB    &kp LSHFT  &kp A  &kp S    &kp D      &kp F                     &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp H     &kp J            &kp K      &kp L     &kp UP    &kp ENTER
&kp LALT   &kp LCTRL  &kp Z  &kp X    &kp C      &kp V        &kp ENTER                &to 0                  &kp N     &kp M            &kp COMMA  &kp LEFT  &kp DOWN  &kp RIGHT
                             &kp ESC  &kp SPACE  &lt 6 ENTER                                                  &kp LGUI  &kp PRINTSCREEN  &mo 7
            >;
        };

        keyboard {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none         &none  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none                  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none         &none           &none         &none  &none  &none  &none  &none  &none
                                        &none         &none         &none                                       &none  &none  &none
            >;
        };

        navigation {
            bindings = <
&none  &none     &none     &none      &none      &none                                          &msc SCRL_UP                     &none     &none      &none      &none      &none  &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp LS(LA(LC(LGUI)))           &msc SCRL_LEFT  &kp RET         &msc SCRL_RIGHT  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none  &none
&none  &none     &none     &none      &none      &none                 &none                    &msc SCRL_DOWN                   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none  &none
                           &kp ESC    &none      &kp TAB                                                                         &kp RET   &kp BSPC   &kp DEL
            >;
        };

        mouse {
            bindings = <
&none  &none     &none     &none      &none      &none                                          &mmv MOVE_UP                     &none           &none           &none         &none            &none  &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp LS(LA(LC(LGUI)))           &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &none
&none  &none     &none     &none      &none      &none                 &none                    &mmv MOVE_DOWN                   &mkp MB4        &msc SCRL_DOWN  &msc SCRL_UP  &mkp MB5         &none  &none
                           &kp ESC    &kp SPACE  &none                                                                           &kp RET         &kp BSPC        &kp DEL
            >;
        };

        symbol {
            bindings = <
&none  &kp LS(CARET)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(TILDE)                  &none         &none                 &none      &none      &none     &none     &none
&none  &kp LS(AMPS)   &kp LS(EXCL)  &kp LBKT      &kp RBKT      &kp EQUAL               &none  &none  &none  &kp LS(LA(LC(LGUI)))  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp LS(PRCNT)  &kp LS(AT)    &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(DLLR)   &none           &none         &none                 &none      &none      &none     &none     &none
                                    &kp ESC       &kp SPACE     &kp LS(UNDER)                                &none                 &kp BSPC   &kp DEL
            >;
        };

        number {
            bindings = <
&none  &kp LS(COLON)  &kp N7  &kp N8  &kp N9     &kp GRAVE                      &none         &none                 &kp LS(LPAR)  &kp LS(RPAR)  &none     &none     &none
&none  &kp LS(STAR)   &kp N4  &kp N5  &kp N6     &kp LS(PLUS)            &none  &none  &none  &kp LS(LA(LC(LGUI)))  &kp LSHFT     &kp LCTRL     &kp LALT  &kp LGUI  &none
&none  &kp FSLH       &kp N1  &kp N2  &kp N3     &kp LS(POUND)  &none           &none         &none                 &none         &kp COMMA     &kp DOT   &kp FSLH  &kp BSLH
                              &kp N0  &kp SPACE  &kp MINUS                                    &kp RET               &none         &kp DEL
            >;
        };

        function {
            bindings = <
&none  &kp F12  &kp F7  &kp F8    &kp F9     &kp PRINTSCREEN                  &none         &none                 &none      &none      &none     &none     &none
&none  &kp F11  &kp F4  &kp F5    &kp F6     &kp INSERT                &none  &none  &none  &kp LS(LA(LC(LGUI)))  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2    &kp F3     &none            &none           &none         &none                 &none      &none      &none     &none     &none
                        &kp BSPC  &kp SPACE  &kp TAB                                        &kp RET               &kp BSPC   &none
            >;
        };
    };
};
